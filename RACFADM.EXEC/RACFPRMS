/*%NOCOMMENT====================* REXX *==============================*/
/*  PURPOSE:  RACFADM - RACF parameters - Menu option 7               */
/*--------------------------------------------------------------------*/
/* FLG  YYMMDD  USERID   DESCRIPTION                                  */
/* ---  ------  -------  -------------------------------------------- */
/* @AD  200424  TRIDJK   Swapped rcvtelen & rcvtslen (end/start leng) */
/* @AC  200424  TRIDJK   Add password lowercase/spc char/ext support  */
/* @AB  200423  RACFA    Move PARSE REXXPGM name up above IF ERATRACE */
/* @AA  200423  RACFA    Ensure REXX program name is 8 chars long     */
/* @A9  200423  RACFA    Chg variable name RCVTGDSN to RCVTPDSN       */
/* @A8  200423  RACFA    Get RACF Bkp database name                   */
/* @A7  200413  RACFA    Chg TRACEing to only display banner (P=Pgms) */
/* @A6  200412  RACFA    Chg TRACE to allow 'L'abels or 'R'esults     */
/* @A5  200224  RACFA    Place panels at top of REXX in variables     */
/* @A4  200221  RACFA    Make 'ADDRESS ISPEXEC' defualt, reduce code  */
/* @A3  200220  RACFA    Added ERATRACE=YES, then TRACE R             */
/* @A2  200120  TRIDJK   Add multi factor authentication (rcvtsmfa)   */
/* @A1  200119  RACFA    Standardized/reduced lines of code           */
/* @A0  011229  NICORIZ  Created REXX, V2.1, www.rizzuto.it           */
/*====================================================================*/
PANEL19  = "RACFPRMS"   /* RACF parameters, menu option 7  */ /* @A5 */
parse source . . REXXPGM .                                    /* @AB */
REXXPGM  = LEFT(REXXPGM,8)                                    /* @AB */

ADDRESS ISPEXEC                                               /* @A4 */
  "VGET (ERATRACE) ASIS"                                      /* @A3 */
  If (eratrace <> 'NO') then do                               /* @A6 */
     Say "*"COPIES("-",70)"*"                                 /* @A6 */
     Say "*"Center("Begin Program = "REXXPGM,70)"*"           /* @A6 */
     Say "*"COPIES("-",70)"*"                                 /* @A6 */
     if (eratrace <> 'PROGRAMS') THEN                         /* @A7 */
        interpret "Trace "SUBSTR(ERATRACE,1,1)                /* @A6 */
  end                                                         /* @A6 */

  cvt     = c2x(storage(10,4))              /* cvt address            */
  cvtrac$ = d2x((x2d(cvt))+992)             /* cvt + 3E0 = cvtrac $   */
  cvtrac  = c2x(storage(cvtrac$,4))         /* cvtrac = access cntl   */
  rcvt$   = cvtrac                          /* store for panel output */

  call Get_bkp_database_name                /* Get bkp dsname         */
  call Get_initial_rcvt_values              /* Get initial values     */
  call Racf_audit_options                   /* Get audit options      */
  call Racf_jes2_options
  call Racf_password_options
  call Racf_rvary_passwords
  call Racf_setropt_options
  call Racf_dasd_options
  call Racf_model_options
  call Racf_terminal_options
  call Racf_tape_options
  call Racf_statistics
  'display panel('PANEL19')'                                  /* @A5 */

  If (eratrace <> 'NO') then do                               /* @A6 */
     Say "*"COPIES("-",70)"*"                                 /* @A6 */
     Say "*"Center("End Program = "REXXPGM,70)"*"             /* @A6 */
     Say "*"COPIES("-",70)"*"                                 /* @A6 */
  end                                                         /* @A6 */

RETURN 0000                                 /* exit                   */
/*--------------------------------------------------------------------*/
/*  Get initial RCVT values                                           */
/*--------------------------------------------------------------------*/
GET_INITIAL_RCVT_VALUES:
  rc        = Setchar(rcvtpdsn,56,44)       /* racf dsn           @A9 */
  rc        = Setchar(rcvtuads,100,44)      /* uads dsn               */
  rc        = Setchar(rcvtuvol,144,6)       /* uads vol               */

  rcvtstat$ =  d2x((x2d(cvtrac))+616)       /*                        */
  x         =  storage(rcvtstat$,4)         /* rnm                    */
  rcvtgrnm  = 'V'substr(x,1,1)'R'substr(x,2,2)'M'substr(x,4,1)
  rcvtstat$ =  d2x((x2d(cvtrac))+36)        /*                        */
  rcvtgext  =  c2x(storage(rcvtstat$,4))    /* RACF extension         */
  rcvtstat$ =  d2x((x2d(cvtrac))+36)        /*                        */
  rcvtgucb  =  c2x(storage(rcvtstat$,4))    /* dsn UCB                */
  rcvtstat$ =  d2x((x2d(cvtrac))+4)         /*                        */
  rcvtgdcb  =  c2x(storage(rcvtstat$,4))    /* dsn dcb                */
  rcvtstat$ =  d2x((x2d(cvtrac))+8)         /*                        */
  rcvtgdeb  =  c2x(storage(rcvtstat$,4))    /* dsn DEB                */

  rc= Setbool(rcvtgsta,53,'80','Active','Inactive')  /* RACF active?  */
  rc= Setbool(rcvtgmsg,153,'04','No','Yes')          /* ICH412I issued*/
  rc= Setbool(rcvtgoff,153,'80','No','Yes')          /* RVARY INACTIVE*/
RETURN
/*--------------------------------------------------------------------*/
/*  RACF JES2 parameters                                              */
/*--------------------------------------------------------------------*/
RACF_JES2_OPTIONS:
  rc= Setbool(rcvtjchk,150,'02','NO','YES') /* jes2_early_verify      */
  rc= Setbool(rcvtjall,150,'01','NO','YES') /* jes2_batchgallracf     */
  rc= Setbool(rcvtjxal,150,'04','NO','YES') /* jes2_xbmallracf        */
  rc= Setchar(rcvtjsys,696,8)               /* jes NJE userid         */
  rc= Setchar(rcvtjund,704,8)               /* jes undefined user     */
RETURN
/*--------------------------------------------------------------------*/
/*  RACF RVARY passwords                                              */
/*--------------------------------------------------------------------*/
RACF_RVARY_PASSWORDS:
  rcvtrwpw$ = d2x((x2d(cvtrac))+440)        /* rcvtrwpw     $         */
  rcvtrwpw  = c2x(storage(rcvtrwpw$,8))     /* rcvtrwpw               */
  rcvtrnpw$ = d2x((x2d(cvtrac))+448)        /* rcvtrwpw     $         */
  rcvtrnpw  = c2x(storage(rcvtrnpw$,8))     /* rcvtrnpw               */
  rc        = Setvalue(rcvtslen,244,1)      /* pe length begin   @AD  */
  rc        = Setvalue(rcvtelen,245,1)      /* pe length end     @AD  */
  if (rcvtslen = 0) then rcvtslen = 1                         /* @AD */
  if (rcvtelen = 0) then rcvtelen = 8                         /* @AD */
  rc        = Setchar(rcvtruls,246,8)       /* password syntax        */
RETURN
/*--------------------------------------------------------------------*/
/*  RACF password options                                             */
/*--------------------------------------------------------------------*/
RACF_PASSWORD_OPTIONS:
  rc = Setvalue(rcvtpinv,155,1)             /* password expires       */
  rc = Setvalue(rcvtphis,240,1)             /* password historical    */
  rc = Setvalue(rcvtprvk,241,1)             /* password revoked att.  */
  rc = Setvalue(rcvtpwrn,242,1)             /* password warning       */
  rc = Setvalue(rcvtpina,243,1)             /* password inactive      */
RETURN
/*--------------------------------------------------------------------*/
/*  RACF setropt options                                              */
/*--------------------------------------------------------------------*/
RACF_SETROPT_OPTIONS:
  rc= Setbool(rcvtsegn,53,'01','NO','YES')  /* egn                    */
  rc= Setbool(rcvtplc,633,'40','NO','YES')  /* lower case pswd    @AC */
  rc= Setbool(rcvtpsc,633,'08','NO','YES')  /* special char pswd  @AC */
  rc= Setbool(rcvtxpwd,633,'04','NO','YES') /* extended pswd spt  @AC */
  rc= Setbool(rcvtmfa,633,'02','NO','YES')  /* mfa                @A2 */
  rc= Setbool(rcvtsads,53,'02','YES','NO')  /* adsp                   */
  rc= Setbool(rcvtscat,628,'40','NO','YES') /* catdsns                */
  rc= Setbool(rcvtseos,393,'20','NO','YES') /* erase on scratch       */
  rc= Setbool(rcvtsapl,764,'08','NO','YES') /* applaudit              */
  rc= Setbool(rcvtsaus,764,'10','YES','NO') /* audit special          */
  rc= Setbool(rcvtsauo,151,'01','NO','YES') /* audit operations       */
  rc= Setbool(rcvtsgrc,329,'80','NO','YES') /* listofgroupschecking   */
  rc= Setbool(rcvtsgno,628,'02','NO','YES') /* generic owner          */
  rc= Setbool(rcvtsmla,628,'04','NO','YES') /* mlactive               */
  rc= Setbool(rcvtsmlq,628,'20','NO','YES') /* mlquiet                */
  rc= Setbool(rcvtsmls,628,'08','NO','YES') /* mls                    */
  rc= Setbool(rcvtsmlt,628,'10','NO','YES') /* mlstable               */
  rc= Setbool(rcvtsslc,628,'80','NO','YES') /* seclabel control       */
  rc= Setbool(rcvtssla,628,'01','NO','YES') /* seclabel audit         */
  rc= Setbool(rcvtswhe,394,'80','NO','YES') /* when program           */
  rc= Setbool(rcvtspra,393,'80','NO','YES') /* protect all            */
  rc= Setvalue(rcvtsrpe,396,2)              /* retention period       */

  rcvtsta$ = d2x((x2d(cvtrac))+630)         /* rcvtsta      $         */
  x        = storage(rcvtsta$,2)
  rcvtslui = c2d(x)                         /* lu session interval    */

  rc       = Setchar(rcvtqual,400,9)        /* prefix password+period */
RETURN
/*--------------------------------------------------------------------*/
/*  Set variable in a Yes/No                                          */
/*--------------------------------------------------------------------*/
SETBOOL:
  variable = arg(1)
  offset   = arg(2)
  value    = arg(3)
  status1  = arg(4)
  status2  = arg(5)
  interpret  "rcvtsta$= d2x((x2d("cvtrac"))+"offset")"
  x        = storage(rcvtsta$,1)
  interpret  variable '= 'status1
  interpret  "x=bitand(x,'"value"'x)"        /* remove unwanted bits   */
  interpret  "if (x= '"value"'x) then "variable"="status2
RETURN 0000
/*--------------------------------------------------------------------*/
/*  Set value                                                         */
/*--------------------------------------------------------------------*/
SETVALUE:
  variable = arg(1)
  offset   = arg(2)
  length   = arg(3)
  interpret  "rcvtsta$= d2x((x2d("cvtrac"))+"offset")"
  cmd      = variable '=c2d(storage('rcvtsta$','length'))'
  interpret  cmd
RETURN 0000
/*--------------------------------------------------------------------*/
/*  Set character                                                     */
/*--------------------------------------------------------------------*/
SETCHAR:
  variable = arg(1)
  offset   = arg(2)
  length   = arg(3)
  interpret  "rcvtsta$= d2x((x2d("cvtrac"))+"offset")"
  cmd      = variable '=storage('rcvtsta$','length')'
  interpret  cmd
RETURN 0000
/*--------------------------------------------------------------------*/
/*  RACF DASD options                                                 */
/*--------------------------------------------------------------------*/
RACF_DASD_OPTIONS:
  rc= Setbool(rcvtdvpr,150,'40','NO','YES') /* dasd vol protection    */
  rc= Setbool(rcvtndup,153,'10','NO','YES') /* no duplicate datasets  */
RETURN
/*--------------------------------------------------------------------*/
/*  RACF model options                                                */
/*--------------------------------------------------------------------*/
RACF_MODEL_OPTIONS:
  rc= Setbool(rcvtmgdg,324,'80','NO','YES') /* model gdg              */
  rc= Setbool(rcvtmusr,324,'40','NO','YES') /* model user             */
  rc= Setbool(rcvtmgrp,324,'20','NO','YES') /* model group            */
RETURN
/*--------------------------------------------------------------------*/
/*  RACF terminal options                                             */
/*--------------------------------------------------------------------*/
RACF_TERMINAL_OPTIONS:
  rc= Setbool(rcvttaut,154,'80','NO','YES') /* terminal auth checking */
  rc= Setbool(rcvttuac,154,'40','NO','YES') /* terminal uacc          */
RETURN
/*--------------------------------------------------------------------*/
/*  RACF statistics                                                   */
/*--------------------------------------------------------------------*/
RACF_STATISTICS:
  rc= Setbool(rcvtnls ,53,'40','Yes','No')          /* racinit        */
  rc= Setbool(rcvtndss,53,'20','Yes','No')          /* data set       */
  rc= Setbool(rcvtntvs,53,'10','Yes','No')          /* tape           */
  rc= Setbool(rcvtndvs,53,'08','Yes','No')          /* dasd           */
  rc= Setbool(rcvtntms,53,'04','Yes','No')          /* terminal       */
RETURN
/*--------------------------------------------------------------------*/
/*  RACF tape options                                                 */
/*--------------------------------------------------------------------*/
RACF_TAPE_OPTIONS:
  rc= Setbool(rcvttvpr,150,'80','NO','YES') /* tape volume protection */
  rc= Setbool(rcvttdpr,392,'40','NO','YES') /* tape dataset protection*/
RETURN
/*--------------------------------------------------------------------*/
/*  RACF audit options                                                */
/*--------------------------------------------------------------------*/
RACF_AUDIT_OPTIONS:
  rcvtauop$=   d2x((x2d(cvtrac))+151)       /* rcvtauop     $         */

  x       =    storage(rcvtauop$,1)         /* rcvtauop               */
  rcvtagro='No'                             /* default                */
  x       =    bitand(x,'40'x)              /* remove unwanted bits   */
  if (x = '40'x) then                       /* audit group class?     */
     rcvtagro='Yes'                         /* yes                    */

  x       =    storage(rcvtauop$,1)         /* rcvtauop               */
  rcvtause='No'                             /* default                */
  x       =    bitand(x,'20'x)              /* remove unwanted bits   */
  if (x = '20'x) then                       /* audit user class ?     */
     rcvtause='Yes'                         /* yes                    */

  x       =    storage(rcvtauop$,1)         /* rcvtauop               */
  rcvtadat='No'                             /* default                */
  x       =    bitand(x,'10'x)              /* remove unwanted bits   */
  if (x = '10'x) then                       /* audit dataset class?   */
     rcvtadat='Yes'                         /* yes                    */

  x       =    storage(rcvtauop$,1)         /* rcvtauop               */
  rcvtadas='No'                             /* default                */
  x       =    bitand(x,'08'x)              /* remove unwanted bits   */
  if (x = '08'x) then                       /* audit DASDVOL class?   */
     rcvtadas='Yes'                         /* yes                    */
RETURN
/*--------------------------------------------------------------------*/
/*  Get RACF backup database name                                @A9  */
/*--------------------------------------------------------------------*/
GET_BKP_DATABASE_NAME:                                        /* @A9 */
  DSDT     = D2X(X2D(CVTRAC) + X2D(E0))   /* Pointer to DSDT pointer */
  DSDT     = C2X(STORAGE(DSDT,4))         /* Pointer to DSDT         */
  DSDTNUM  = D2X(X2D(DSDT) + X2D(4))      /* Address of DSDTNUM      */
  DSDTNUM  = C2D(STORAGE(DSDTNUM,4))      /* DSDTNUM                 */
  DSDTBACK = D2X(X2D(DSDT) + X2D(140))    /* Address of 1st Bkup DSN */
  BNAME    = D2X(X2D(DSDTBACK) + X2D(21)) /* Addr of backup name     */
  RCVTBDSN = STRIP(STORAGE(BNAME,44))     /* Backup name             */
RETURN                                                        /* @A9 */
