/*%NOCOMMENT====================* REXX *==============================*/
/*  PURPOSE:  RACFADM - Display Menu - LIBDEF and ALTLIB datasets     */
/*--------------------------------------------------------------------*/
/* FLG  YYMMDD  USERID   DESCRIPTION                                  */
/* ---  ------  -------  -------------------------------------------- */
/* @K1  200514  TRIDJK   Check user cmd table before site cmd table   */
/* @L2  200512  LBD      Add Parm of NA to bypass Allocations         */
/* @L1  200512  LBD      Changed several areas to improve processing  */
/* @A4  200501  RACFA    If 1st time used, get site default settings  */
/* @A3  200501  LBD      Add dynamic command table                    */
/* @A2  200124  RACFA    Place panels at top of REXX in variables     */
/* @A1  200120  LBD      Added code for sites using qual. PLIB/MLIB   */
/* @A0  200120  LBD      Created REXX                                 */
/*====================================================================*/
Arg RAOPT                                                       /*@L1*/
                                                                /*@L1*/
PANEL01     = "RACFMENU"  /* RACF Main Menu                */ /* @A2 */
REXXPGM1    = "RACFSETD"  /* Get def settings for new user */ /* @A4 */
REXXPGM2    = "RACFSITE"  /* Get def settings for site     */ /* @LD */

ADDRESS ISPEXEC
  Call Setup                                                    /*@L1*/
  Call Check_Rfind                                              /*@L1*/
  'Select cmd('REXXPGM1')'                                      /*@L1*/
  'Select cmd('REXXPGM2')'                                      /*@L1*/
  'Select Panel('PANEL01')'                                     /*@L1*/
EXIT 0
/*--------------------------------------------------------------------*/
/*  Obtain dataset names and LIBDEF/ALTLIB them                       */
/*--------------------------------------------------------------------*/
SETUP:
  parse source src
  parse value src with TSO Type Name DDName DSName,
                       NameO Env Addr Token
  cmd = name
  'vget (zapplid)'                                              /*@L1*/
  if raopt = 'NA' then return                                   /*@L2*/
  if (zapplid /= 'RADM') then call setup_applid                 /*@L1*/
  if (DSName /= '?') then exec = "'"dsname"'"
  else do
     x      = listdsi(DDName 'FILE')
     exec   = "'"sysdsname"'"
     dsname = sysdsname
  end
  dsname = translate(dsname,' ','.')
  panels = "'"subword(dsname,1,words(dsname)-1)" PANELS'"
  msgs   = "'"subword(dsname,1,words(dsname)-1)" MSGS'"
  plib   = "'"subword(dsname,1,words(dsname)-1)" ISPPLIB'"    /* @A1 */
  mlib   = "'"subword(dsname,1,words(dsname)-1)" ISPMLIB'"    /* @A1 */
  panels = translate(panels,'.',' ')
  msgs   = translate(msgs,'.',' ')
  plib   = translate(plib,'.',' ')                            /* @A1 */
  mlib   = translate(mlib,'.',' ')                            /* @A1 */
  x = listdsi(plib)                                           /* @A1 */
  if (x = 0) then panels = plib                               /* @A1 */
  x = listdsi(mlib)                                           /* @A1 */
  if (x = 0) then msgs = mlib                                 /* @A1 */
  Address TSO 'Altlib Act app(Exec) Dataset('exec')'
  'Libdef ISPMLIB dataset id('msgs') Stack'
  'Libdef ISPPLIB dataset id('panels') Stack'
RETURN
/* ------------------------------------------------------ *     /*@L1*/
 | Setup Applid:  If not RADM applid then recurse into it |     /*@L1*/
 * ------------------------------------------------------ */    /*@L1*/
SETUP_Applid:                                                   /*@L1*/
  'Select cmd('cmd') NewAppl(RADM) Passlib'                     /*@L1*/
  if raopt = 'NA' then exit                                     /*@L2*/
  'libdef ispmlib'                                              /*@L1*/
  'libdef ispplib'                                              /*@L1*/
   Address TSO 'altlib deact app(exec)'                         /*@L1*/
  Exit                                                          /*@L1*/
/* --------------> Enable Repeat Find <------------------- *    /*@L1*/
 | This approach does not require recursion or creating an |    /*@L1*/
 | ISPF table for the applications commands. This approach |    /*@L1*/
 | updates the active site command table in memory.        |    /*@L1*/
 |                                                         |    /*@L1*/
 | This does:                                              |    /*@L1*/
 | 1. Define the commmand table entry                      |    /*@L1*/
 | 2. vget the variable with the prefix for the site ISPF  |    /*@L1*/
 |    command table.                                       |    /*@L1*/
 | 3. define a varable with the command table name         |    /*@L1*/
 | 4. Move to the top of the command table                 |    /*@L1*/
 | 5. Establish the table search                           |    /*@L1*/
 | 6. if the entry is found then add it                    |    /*@L1*/
 | 7. prime the variable to null                           |    /*@L1*/
 * ------------------------------------------------------- */   /*@L1*/
Check_Rfind:                                                    /*@L1*/
  zctverb = "RFIND"                                             /*@L1*/
  zcttrunc = 0                                                  /*@L1*/
  zctact = "&RADMRFND"                                          /*@L1*/
  zctdesc = "RACFADM User controlled Repeat Find (RFIND)"       /*@L1*/
  'vget (zsctpref zuctpref)'                                    /*@K1*/
  select                                                        /*@K1*/
    when zuctpref <> '' then                                    /*@K1*/
      ctab = zuctpref'cmds'                                     /*@K1*/
    when zsctpref <> '' then                                    /*@K1*/
      ctab = zsctpref'cmds'                                     /*@K1*/
    otherwise                                                   /*@K1*/
      ctab = 'ISPcmds'                                          /*@K1*/
    end                                                         /*@K1*/
  'tbtop' ctab                                                  /*@L1*/
  'tbscan' ctab 'arglist(zctact)  condlist(EQ) Next'            /*@L1*/
  if rc > 0 then 'tbadd' ctab                                   /*@L1*/
  radmrfnd = null                                               /*@L1*/
  'vput (radmrfnd)'                                             /*@L1*/
  return                                                        /*@L1*/
